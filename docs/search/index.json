[{"content":"はじめに 今回はPCのデスクトップ上で手軽に扱える音楽プレーヤーの作成を行っていきます。\nWindowsでは音楽の再生ソフトで「メディアプレーヤー」がインストールされています。\nが、音楽ファイルを実行しないと(= 音楽ファイルの場所までいかなと)いけなかったり、使い勝手があんまり好みじゃなかったりするため自作していくことにしました。\nこのパートでは、まず音楽ファイルが再生できるところまでを実装していきます。\n方針・構想 今回作りたいもの 今回作りたい音楽プレーヤーはこんな感じで考えています。\n音楽プレーヤー自体はモニターの片隅に置けるくらいの大きさとします。また、PCの起動と同時に音楽プレーヤーも起動がかかるようにし、いつでも再生できるようにします。(これは実装するというよりもWindowsで設定する内容になると思います。)\n音楽プレーヤーの表示内容としては、音の波形を表示できるようにして、視覚的にも楽しめるようにします。\nUI部分はなるべく小さくし、最小限の機能のみを実装するようにします。\nUI名 機能 フォルダパス指定 サブフォルダも含めて、このパス下に格納している音楽ファイルを再生できるようにする。 戻る/再生/停止/次へ 音楽を操作するボタン カラー指定 波形表示やボタンの文字色などの色を自分好みに変更できるようにします。 再生モード 順番に再生 or ランダム再生 後は作ってく中で思いついたり、使ってく中で欲しい物を随時付け足していく形で実装していきます。\n事前調査 上記の内容が作れるかどうかを調査していきます。\n一番実装が難しいと思われるは音楽のは波形表示ですが、以下の記事ですでに実装されている方がいました。\nC#で音声波形を表示する音楽プレーヤーを作る\nほとんどほしい内容が実装されていますね\u0026hellip;。\nですが、サンプルプログラムはツールの起動で指定された音楽ファイル1曲しか再生されないようになっています。今回は複数の音楽ファイルを順番に再生していくようなをものを作りたいので、このあたりは自分で実装していく必要がありそうです。\n波形の表示は高速フーリエ変換を使って行っているようです。計算自体はライブラリに任せていますが、その計算結果を使って表示の指定を行っているようです。かなり細かく座標など指定しています。\nまた、ツール自体はWPFで作成されており、NAudioという音楽ファイル操作ライブラリを使用して波形表示や音楽ファイルの操作を行っているようです。\nとりあえず作れそうなことはわかりました。\n環境構築 以上の内容から、今回の開発環境は以下となります。\nWPF：Windows GUIツールを作成できる環境 Visual Studio 2022：WPFを扱える統合開発環境 NAudio v2.1.0：音楽ファイルを操作できるライブラリ .NET Framework 4.8：C#を扱えるようにするためのフレームワーク(Windowsならデフォルトで入ってるはず) Visual Studio 2022のインストール まずはVisual Studioをインストールしていきます。これをインストールすればWPFも扱えるようになります。 WPFもここで一緒にインストールできます。\n以下のサイトからVisualStuidioのインストーラを落としていきます。\nhttps://visualstudio.microsoft.com/ja/downloads/\nVisual Studioには無料版としてCommunityが用意されているのでこれを選びます。\nインストーラを落としてきたら実行して、表示されている内容を進めていきます。\n以下の画面まで来たら、「.NETデスクトップ開発」を選択して次に進みます。\nこれがWPFの環境です。他にもいろいろな開発環境がありますが、最低限のものだけ選択します。\n他に必要な環境が出てきたら、インストーラを起動することで後からでも環境を追加することができます。\nインストールができたら、プロジェクトを新規作成します。\n(VisualStudioを初めて起動した際に、Microsoftアカウントでのサインインが求められます。)\n[新しいプロジェクトの作成]を選択してプロジェクトの設定を行っていきます。\nまずはWPFで開発できるように「WPFアプリ(.NET Framework)」を選択します。\nプロジェクト名・作成場所・フレームワークのバージョンを決めて作成します。\n.NET Frameworkのバージョンは4.8としました。\nNAudioのインストール NAudioのインストールもVisualStudio上からできます。\nVisualStudioの画面右側の「ソリューションエクスプローラ内」の「参照」を右クリックして「NuGetパッケージの管理」をクリックします。 検索欄に「NAudio」と入力すると見つけることができます。\n選択して「インストール」をクリックします。\n(画像はインストール後のものなので「アンインストール」と表示されています。)\nこれでusingを使ってNAudioのライブラリを指定すれば利用することができるようになります。\nサンプルプログラムを動かしてみる まずは、すでに作成済みの波形表示のプログラムを動かしています。\nサンプルプログラムとして以下のサイトのソースを動かしてみます。(再掲)\nC#で音声波形を表示する音楽プレーヤーを作る\nそのままでは動かなかったので一部修正します。\n■MainWindows.xaml.csグローバル変数outputDeviceの宣言(MainWindows.xaml.cs)\n(before)\n1 2 3 4 /// \u0026lt;summary\u0026gt; /// 音楽プレーヤー /// \u0026lt;/summary\u0026gt; private WaveOutEvent outputDevice; (after)\n1 2 3 4 /// \u0026lt;summary\u0026gt; /// 音楽プレーヤー /// \u0026lt;/summary\u0026gt; private WaveOut outputDevice; ■グローバル変数outputDeviceの初期化(MainWindows.xaml.cs)\n(before)\n1 2 // プレーヤーの生成 outputDevice = new WaveOutEvent(); (after)\n1 2 // プレーヤーの生成 outputDevice = new WaveOut(); ■再生する音楽ファイルの指定(MainWindows.xaml.cs)\n(before)\n1 2 // 再生するファイル名 fileName = \u0026#34;music\\\\sample.wav\u0026#34;; (after)\n1 2 // 再生するファイル名 fileName = \u0026#34;(任意のファイルを指定)\u0026#34;; 参考サイトが少し古いからでしょうか？NAudioに更新が入ったのか、上記のように修正しないと動きませんでした。\nツールの背景は半透過されてます。常駐するなら邪魔にならなそうです。\n波形の表示の感じは真ん中の方があまり振れていませんが、これで良いのでしょうか\u0026hellip;？ 横軸は周波数？この辺の話に明るくないので、波形が合ってるのかわかりませんが、これをベースに実装していくことにします。\n音楽再生部分の実装 まずは、音楽を再生できるようにします。\nレイアウト サンプルのものから、画面のレイアウトを以下のように変更します。\n下の方にUIの領域を作りました。ボタンなどはデフォルトのデザインなの見た目がいまいちですが、この辺は後で整えていきます。まずは最低限のパス選択部・再生停止ボタンを実装します。\nGridコントロールで領域を分けて、GUIを配置していきます。(全体のソースは後述)\n領域分けの例です。\nMainWindow.xaml\n1 2 3 4 \u0026lt;Grid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026#34;9*\u0026#34;\u0026gt;\u0026lt;/RowDefinition\u0026gt; \u0026lt;RowDefinition Height=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/RowDefinition\u0026gt; \u0026lt;/Grid.RowDefinitions\u0026gt; 上記では波形表示領域とUI領域に分割する記述です。\n画面を縦に9:1の比で分割するように設定しています。\n横に分割する場合はGrid.ColumnDefinitionsで分割できます。\nMainWindow.xaml\n1 2 3 \u0026lt;Grid Grid.Row=\u0026#34;0\u0026#34; Name=\u0026#34;gridWaveArea\u0026#34;\u0026gt; \u0026lt;/Grid\u0026gt; 分割の定義の下に上記のように記述すると、分割した1つの領域にコントロール(GUIパーツ)を配置することができます。この中にはGridコントロールも記述することができます。つまりGridコントロールの入れ子を作ることができます。これにより、細かく構造的にGUIパーツの配置を行うことができます。\nMainWindow.xaml\n1 2 3 4 5 6 7 8 9 10 \u0026lt;Grid Grid.Column=\u0026#34;1\u0026#34; Name=\u0026#34;gridCtrlButtons\u0026#34;\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;0\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonReturn\u0026#34; Click=\u0026#34;click_buttonReturn\u0026#34;\u0026gt;戻し\u0026lt;/Button\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;1\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonStartPause\u0026#34; Click=\u0026#34;click_buttonStartandPause\u0026#34;\u0026gt;再生\u0026lt;/Button\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;2\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonNext\u0026#34; Click=\u0026#34;click_buttonNext\u0026#34;\u0026gt;送り\u0026lt;/Button\u0026gt; \u0026lt;/Grid\u0026gt; 戻し/再生/送りボタンの部分はこんな感じ。NameプロパティでC#のソース上でボタンを操作することができるようになります。(ボタンを操作するための変数の宣言というイメージ。)また、Clickプロパティはボタンをクリックしたときの動作関数です。ここには関数名を記述して、C#ソース上でこの関数を定義します。\n機能実装 C#ソースの方を記述してボタンなどの機能を実装していきます。\nサンプルプログラムで定義されているグローバル変数は予めコピーしてきたものとします。\nパス選択部 「\u0026hellip;」ボタンを押したらフォルダブラウザダイアログを表示して音楽ファイル格納先を選択できるようにします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void click_buttonBrowser(object sender, RoutedEventArgs e) { /* フォルダを選択させる */ var folderBrowserDialog = new Forms.FolderBrowserDialog(); folderBrowserDialog.Description = \u0026#34;MP3ファイルを格納しているフォルダーを選択してください。\u0026#34;; if(folderBrowserDialog.ShowDialog() == Forms.DialogResult.OK) { basePath = folderBrowserDialog.SelectedPath; textboxBasePath.Text = basePath; } else { /* OK以外のときはリターンする */ return; } /* 選択したパス内のMP3ファイルを取得する */ fileNames = Directory.GetFiles(basePath, \u0026#34;*.mp3\u0026#34;, SearchOption.AllDirectories); /* 音楽を再生する前準備 */ setAudioRender(); } ダイアログの表示はFormsのFolderBrowserDialogクラスを使用します。\n1 2 3 4 /* フォルダを選択させる */ var folderBrowserDialog = new Forms.FolderBrowserDialog(); folderBrowserDialog.Description = \u0026#34;MP3ファイルを格納しているフォルダーを選択してください。\u0026#34;; このクラスは、FormsというWPFとは別の環境で使えるライブラリを利用します。\nFormsを利用するには、ソリューションエクスプローラの「参照」を右クリックし、「参照の追加」を選択します。 出てきたダイアログ上の検索欄で「Forms」と検索して「System.Windows.Forms」にチェックします。\nC#ソース上では以下のように記述して呼び出せるようにします。\n1 using Forms = System.Windows.Forms; フォルダを選んでOKしたときは選択したパスの格納と表示を行います。OKを押さなかったときは何もしません。\n1 2 3 4 5 6 7 8 9 10 if(folderBrowserDialog.ShowDialog() == Forms.DialogResult.OK) { basePath = folderBrowserDialog.SelectedPath; textboxBasePath.Text = basePath; } else { /* OK以外のときはリターンする */ return; } パス選択後はそのフォルダ内に存在するMP3ファイルのファイル名を配列に格納します。\n(GetFilesメソッドの代3引数でサブフォルダの中のMP3ファイルも取得するようにしています。)\nその後、音楽ファイルを再生するための前処理を行う関数をコールします。\n1 2 3 4 5 /* 選択したパス内のMP3ファイルを取得する */ fileNames = Directory.GetFiles(basePath, \u0026#34;*.mp3\u0026#34;, SearchOption.AllDirectories); /* 音楽を再生する前準備 */ setAudioRender(); 音楽再生の前処理 サンプルプログラムの音楽の再生に関わる部分だけ抜き出して関数化しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 private void setAudioRender() { // ファイル名の拡張子によって、異なるストリームを生成 audioStream = new AudioFileReader(fileNames[fileNamesIndex]); // コンストラクタを呼んだ際に、Positionが最後尾に移動したため、0に戻す audioStream.Position = 0; // プレーヤーの生成 outputDevice = new WaveOut(); // 音楽ストリームの入力 outputDevice.Init(audioStream); } 本パートでは実装しませんが、1曲終わる毎に、次の曲再生のためにこの関数を呼び出すような形にします。\n再生/一時停止ボタン 再生ボタンと一時停止のボタンは1つのボタンに割り付けてトグル動作できるようにします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void click_buttonStartandPause(object sender, RoutedEventArgs e) { /* BasePath未入力 or MP3ファイルのないパスを選択した場合は何もしない */ if (fileNames.Length == 0) { return; } if(isPlaying) { /* 再生中のとき =\u0026gt; ポーズ状態へ以降 */ pauseAudio(); //音楽を一時停止 buttonStartPause.Content = \u0026#34;再生\u0026#34;; isPlaying = false; } else { /* ポース中のとき =\u0026gt; 再生状態へ以降 */ startAudio(); //音楽を再生 buttonStartPause.Content = \u0026#34;停止\u0026#34;; isPlaying = true; } } MP3ファイルが格納されていないパスが選択されている場合に再生ボタンを押すとエラー終了を起こす可能性があるので例外処理を行っています。\n1 2 3 /* BasePath未入力 or MP3ファイルのないパスを選択した場合は何もしない */ if (fileNames.Length == 0) { return; } トグル動作の部分は以下です。\n変数を使って音楽再生中かどうかを状態管理して、再生中のときは一時停止する処理＆表示、一時停止中のときは再生する処理＆表示を行います。状態管理の変数は、グローバル変数として宣言していますが、NAudioに状態を返してくれるプロパティがいるみたいです。もしかしたらそっちで状態管理するように変更するかも\u0026hellip;?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 if(isPlaying) { /* 再生中のとき =\u0026gt; ポーズ状態へ以降 */ pauseAudio(); //音楽を一時停止 buttonStartPause.Content = \u0026#34;再生\u0026#34;; isPlaying = false; } else { /* ポース中のとき =\u0026gt; 再生状態へ以降 */ startAudio(); //音楽を再生 buttonStartPause.Content = \u0026#34;停止\u0026#34;; isPlaying = true; } 音楽の停止処理と再生処理は以下のように関数化しています。\n1 2 3 4 5 6 7 8 9 10 11 private void startAudio() { // 音楽の再生 (おそらく非同期処理) outputDevice.Play(); } private void pauseAudio() { //音楽の停止 outputDevice.Stop(); } 今の時点では関数化する必要は全くありませんが、この後波形表示を実装する際に、音楽の停止と同時に表示も止めれるようにしたいので関数化しています。\n成果物 動作 今回の実装でできあがったものはこんな感じ。\n最初の方は動画に写っていませんが、フォルダブラウザダイアログが立ち上がってフォルダを選択できるようになっています。\nちなみに音源は自作で打ち込んだものを使用しています。\n(UNISON SQUARE GARDENのスノウリバースです。)\nソース ■MainWindow.xaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;Window x:Class=\u0026#34;DesktopMusicPlayer.MainWindow\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026#34; xmlns:x=\u0026#34;http://schemas.microsoft.com/winfx/2006/xaml\u0026#34; xmlns:d=\u0026#34;http://schemas.microsoft.com/expression/blend/2008\u0026#34; xmlns:mc=\u0026#34;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026#34; xmlns:local=\u0026#34;clr-namespace:DesktopMusicPlayer\u0026#34; mc:Ignorable=\u0026#34;d\u0026#34; Title=\u0026#34;MainWindow\u0026#34; Height=\u0026#34;450\u0026#34; Width=\u0026#34;800\u0026#34; AllowsTransparency=\u0026#34;True\u0026#34; Background=\u0026#34;#80000024\u0026#34; WindowStyle=\u0026#34;None\u0026#34;\u0026gt; \u0026lt;Window.ContextMenu\u0026gt; \u0026lt;ContextMenu\u0026gt; \u0026lt;MenuItem Header=\u0026#34;Exit\u0026#34; Click=\u0026#34;Quit_Clicked\u0026#34;/\u0026gt; \u0026lt;/ContextMenu\u0026gt; \u0026lt;/Window.ContextMenu\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;Grid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026#34;9*\u0026#34;\u0026gt;\u0026lt;/RowDefinition\u0026gt; \u0026lt;RowDefinition Height=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/RowDefinition\u0026gt; \u0026lt;/Grid.RowDefinitions\u0026gt; \u0026lt;Grid Grid.Row=\u0026#34;0\u0026#34; Name=\u0026#34;gridWaveArea\u0026#34;\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;Grid Grid.Row=\u0026#34;1\u0026#34; Name=\u0026#34;gridUiArea\u0026#34;\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;3*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;Grid Grid.Column=\u0026#34;0\u0026#34; Name=\u0026#34;gridBasePathInput\u0026#34;\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;3*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;TextBlock Grid.Column=\u0026#34;0\u0026#34; Foreground=\u0026#34;white\u0026#34; HorizontalAlignment=\u0026#34;Center\u0026#34; VerticalAlignment=\u0026#34;Center\u0026#34;\u0026gt;BasePath\u0026lt;/TextBlock\u0026gt; \u0026lt;TextBox Grid.Column=\u0026#34;1\u0026#34; Margin=\u0026#34;1\u0026#34; IsReadOnly=\u0026#34;True\u0026#34; Name=\u0026#34;textboxBasePath\u0026#34;\u0026gt;\u0026lt;/TextBox\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;2\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonBrowser\u0026#34; Click=\u0026#34;click_buttonBrowser\u0026#34;\u0026gt;...\u0026lt;/Button\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;Grid Grid.Column=\u0026#34;1\u0026#34; Name=\u0026#34;gridCtrlButtons\u0026#34;\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;ColumnDefinition Width=\u0026#34;*\u0026#34;\u0026gt;\u0026lt;/ColumnDefinition\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;0\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonReturn\u0026#34; Click=\u0026#34;click_buttonReturn\u0026#34;\u0026gt;戻し\u0026lt;/Button\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;1\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonStartPause\u0026#34; Click=\u0026#34;click_buttonStartandPause\u0026#34;\u0026gt;再生\u0026lt;/Button\u0026gt; \u0026lt;Button Grid.Column=\u0026#34;2\u0026#34; Margin=\u0026#34;1\u0026#34; Name=\u0026#34;buttonNext\u0026#34; Click=\u0026#34;click_buttonNext\u0026#34;\u0026gt;送り\u0026lt;/Button\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/Window\u0026gt; ■Mainwindow.xaml.cs\nusing System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using NAudio.Wave; using NAudio.Dsp; using Microsoft.Win32; using System.Runtime.CompilerServices; using Forms = System.Windows.Forms; using System.IO; using System.Windows.Threading; namespace DesktopMusicPlayer { /// \u0026lt;summary\u0026gt; /// MainWindow.xaml の相互作用ロジック /// \u0026lt;/summary\u0026gt; public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); // ウィンドウをマウスのドラッグで移動できるようにする this.MouseLeftButtonDown += (sender, e) =\u0026gt; this.DragMove(); isPlaying = false; fileNamesIndex= 0; } /* グローバル変数 */ private string basePath; //音楽ファイルを格納しているフォルダのパス private string[] fileNames; //音楽ファイルの名前 private bool isPlaying; //再生中かどうかのフラグ private int fileNamesIndex; //fileNamesのindex private WaveOut outputDevice; //音楽プレーヤー private AudioFileReader audioStream; //フーリエ変換前の音楽データ private readonly long reciprocal_of_FPS = 167000; //60(fps)の逆数 (100ns) private float[,] result; //フーリエ変換後の音楽データ private DispatcherTimer timer = null; //タイマー割り込みに使用するタイマー private Line[] bar; //音声波形表示に使用するLine(バー) private Brush brush; //音声波形表示のLine(バー)に使用するブラシ private int bytePerSec; //1秒当たりのバイト数 private int musicLength_s; //音楽の長さ (秒) private int playPosition_s; //再生位置 (秒) private int drawPosition; //音声波形表示位置 private bool barDrawn = false; //描画済みのLine(バー)があるかを示すフラグ (生成済み = true, 未生成 = false) private void click_buttonReturn(object sender, RoutedEventArgs e) { /* BasePath未入力 or MP3ファイルのないパスを選択した場合は何もしない */ if (fileNames.Length == 0) { return; } } private void click_buttonStartandPause(object sender, RoutedEventArgs e) { /* BasePath未入力 or MP3ファイルのないパスを選択した場合は何もしない */ if (fileNames.Length == 0) { return; } if(isPlaying) { /* 再生中のとき =\u0026gt; ポーズ状態へ以降 */ pauseAudio(); //音楽を一時停止 buttonStartPause.Content = \u0026#34;再生\u0026#34;; isPlaying = false; } else { /* ポース中のとき =\u0026gt; 再生状態へ以降 */ startAudio(); //音楽を再生 buttonStartPause.Content = \u0026#34;停止\u0026#34;; isPlaying = true; } } private void click_buttonNext(object sender, RoutedEventArgs e) { /* BasePath未入力 or MP3ファイルのないパスを選択した場合は何もしない */ if (fileNames.Length == 0) { return; } } private void click_buttonBrowser(object sender, RoutedEventArgs e) { /* フォルダを選択させる */ var folderBrowserDialog = new Forms.FolderBrowserDialog(); folderBrowserDialog.Description = \u0026#34;MP3ファイルを格納しているフォルダーを選択してください。\u0026#34;; if(folderBrowserDialog.ShowDialog() == Forms.DialogResult.OK) { basePath = folderBrowserDialog.SelectedPath; textboxBasePath.Text = basePath; } else { /* OK以外のときはリターンする */ return; } /* 選択したパス内のMP3ファイルを取得する */ fileNames = Directory.GetFiles(basePath, \u0026#34;*.mp3\u0026#34;, SearchOption.AllDirectories); /* 音楽を再生する前準備 */ setAudioRender(); } private void setAudioRender() { // ファイル名の拡張子によって、異なるストリームを生成 audioStream = new AudioFileReader(fileNames[fileNamesIndex]); // コンストラクタを呼んだ際に、Positionが最後尾に移動したため、0に戻す audioStream.Position = 0; // プレーヤーの生成 outputDevice = new WaveOut(); // 音楽ストリームの入力 outputDevice.Init(audioStream); } private void startAudio() { // 音楽の再生 (おそらく非同期処理) outputDevice.Play(); } private void pauseAudio() { //音楽の停止 outputDevice.Stop(); } /// \u0026lt;summary\u0026gt; /// コンテキストメニューのExitが押されたときのイベントハンドラ /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;sender\u0026#34;\u0026gt;イベント送信元\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;e\u0026#34;\u0026gt;イベント引数\u0026lt;/param\u0026gt; private void Quit_Clicked(object sender, RoutedEventArgs e) { Close(); } } } まとめ 今回は自作のデスクトップ音楽プレーヤーを作るということで、サンプルプログラムをもとに音楽を再生する部分を実装しました。次回は1曲終了後にループできるように実装します。\n参考にさせていただいたサイト C#で音声波形を表示する音楽プレーヤーを作る(Qiita) 【初心者向け】Visual Studio 2022を無料インストールする手順(おとといからきたいも) NAudioを使って試験波形のWave形式録音(TomoSoft) ","date":"2023-01-15T13:15:57+09:00","permalink":"https://Oo-Esechi-oO.github.io/p/20230115/","title":"デスクトップ音楽プレーヤーを作る #1"},{"content":"はじめに 今回は何partかに分けて自作PCにチャレンジした際の記録を書いていきます。これから自作PCを組もうとしている方で、「何からやればよいかわからない」「どんな作業工程があるのか知りたい」という方向けの記事となっています。\nPart3では組み立てからセットアップまでの部分をまとめていきます。これが最終回になります。\n組み立て 必要なもの・注意点 自作PCの組み立てで必要なものは「プラスドライバー」です。とりあえずこれがあれば組み立てることができます。あとは広い場所を確保することくらいですかね。かなり散らかります。\n静電気対策で軍手などの作業手袋を用意するようにと書いてあるところもありますが、あまりおすすめしません。軍手などを使って作業することで細かい作業がしづらくなってしまいます。はじめて組み立てを行う人は慣れていないので、パーツを落として壊してしまう可能性が高くなってしまいます。(って店員さんが言ってました。)\n静電気が気になる方はパーツを触る前に、金属のものに触れて放電するだけで十分とのことでした。\nあとパーツの化粧箱は取っておいたほうが良いです。パーツを入れ替えた際に、不要になったパーツは中古店に売ることができますが、箱の有無で買取価格が変わるものがあります。\nざっと調べた感じ、箱を残しておいたほうが良いものとしてはCPU・GPUが挙げられるみたいです。\n箱からパーツを出す際は箱をめちゃくちゃにしないように注意して取り出しましょう。\n組立作業 それではここから実際の組み立ての様子をまとめていきます。\nマザーボードとCPU まずはマザーボードにパーツを載せて行きます。\nということでマザーボード開封～\nまず最初に取り付けるのはCPU!ここが一番ミスしてはいけない作業。CPUには取り付けの向きがあるので、それを間違えると取り返しがつかないことになります。具体的には、CPUの裏側にあるピンが折れる、またはマザーボードのCPU取り付け位置にあるピンが折れてしまいます。このピンが折れると完全に使い物にならない「ただの板」が出来上がるので注意が必要です。\nCPUはこんな感じに入っています。\nCPUクーラーも入っていますが、今回はもっと性能の良いCPUクーラーを別途購入しているため使いません。\nCPU本体の表と裏。\n裏側のピンが一本でも折れると使い物にならなくなります。\n向きを間違えないようにするためには、表面の左下にある三角形のマークとマザーボードのCPU取り付け位置にある三角形のマークを合わせること/ CPUの上下にある溝とマザーボードのCPU取り付け位置にある出っ張りを合うようにする必要があります。\n設置後の様子はこんな感じ。\nマザーボードのCPU取り付け位置のカバーを開けて向きに注意して設置して、カバーを閉じればOKです。CPUの左下とマザーボードのカバーの左下に刻印されている三角形のマークが揃っていることに注目です。これが正しい向きで設置できている確認になります。\nCPUクーラー 続いてCPUクーラーを取り付けます。(正直CPUクーラーの取り付けはマザーボードをケースに設置してからやった方がやりやすかった気がしています\u0026hellip;。)\n梱包の様子はこんな感じ。\nAMD用のパーツとintel用のパーツがあるので、取説をしっかり確認して組み立てて設置していきます。\nまずは土台の設置から。\nマザーボード裏側から4本足のパーツを通して\u0026hellip;\n足場を作って\u0026hellip;\n足場を固定。\n熱伝導をよくするためのグリスを塗って\u0026hellip;\n(グリスも同梱されています。注射器みたいなやつですね。)\n冷却板を設置します。\n向きはこれで合ってるのかな？\n次にファンを設置します。\nマザーボード上の「CHA_FAN1」に端子を繋いで、コードの長さを調整します。(コードのあまりが多い場合は、本体に巻きつけるなどして調整します。)\nファン側面には「ファンが回る向き」と「風の向き」が刻印されているので、これをもとに設置向きを決定します。\nPC内部の風の流れの参考サイトは以下。\n最適な空気の流れと冷却のためにPCのファンを管理する方法\nPC内の空気の流れは「前から後ろ」「下から上」です。ケース前面のフロントファンから冷たい空気を取り入れて、ケース後方のリアファンから温まった空気を逃がすことで効率的にPC内を冷やすことができます。\nCPUは一番冷やしたいパーツですので、フロントファンから取り込んだ冷たい空気をそのまま当てれるように向きを決定します。\nCPUクーラーの取り付け向きが決まったら、設置のための金具を付けて\u0026hellip;\n冷却板に引っ掛けるような形で設置します。\n(画像でいうと右から左に空気が流れるように設置しています。)\nここまでの手順でマザーボード全体はこんな感じ\n上でも書きましたが、CPUクーラーはマザーボードをケースに設置してからのほうが、扱いやすかったなと思いました。\nメモリ 続いてメモリを設置します。 今回のマザーボードは、メモリスロットのロックは片側しかないため、ロックを解除して\u0026hellip;\n向きに注意して、しっかりと差し込みます。\n(半挿しの状態にならないようにカチッと音がなるまで、音がなっても念のため最後にグッと押し込みます。)\n今回メモリは8GB*2枚でデュアルチャンネルの構成にしているので、一つ飛ばしたスロットにもう一枚設置して完了です。\nSSD 次はSSDを設置します。\nマザーボード上のSSD取り付け位置のカバーを外して\u0026hellip;\nSSD本体をスロットに差し込んで\u0026hellip;\n外したカバー裏面のヒートシンクのカバーをペロッとめくって\u0026hellip;\nもとに戻す。\nケースとマザーボード ここまで来たらケースにマザーボードを設置します。\nケース開封\n側面を外した感じはこんなん。\n今回購入したPCケースには小さい基盤が設置されています。\nフロントパネルコネクタといい、ここで一括でフロントファン・リアファン・LEDの管理を行います。\nケースにマザーボードを設置した様子はこちら。\nケース後方の入出力I/Fのポートを合わせるのが難しかった。次マザーボードを購入することがあれば、ここのポートは最初から覆われてるものを買うことにします。\nグラフィックボード 次にグラボを積みます。\nPCIeの設置場所にあるカバーを取って\u0026hellip;\nPCIeのスロットに合わせてグラボを設置します。\nそんでネジで固定します。\nもともとあったカバーは設置できなくなるので保管しておきましょう。\n電源ユニット そして電源ユニットを設置します。\nここまでの全体の様子はこんな感じ。\n配線 次に配線を行っていくのですが、ここのあたり写真を撮るのを忘れてしましました\u0026hellip;。 どこに接続するのかまるでわからず、一生懸命になるあまり忘れてしまいました\u0026hellip;。\n接続が必要なのは、「電源とマザーボード」「電源とグラボ」「電源とフロントパネル」だった思います。 端子の接続部分の形やピンの数が同じことを確認して接続していきます。 形が合わないもの同士は接続できないので、間違ったところに挿して故障するみたいなことは起こりにくいと思います。\n動作確認 配線までできたら動作確認を行います。\n自分が遭遇したトラブルとしては、「CPUクーラーは動くのに、ケースのファンが回らない・光らない」と言ったものです。これの原因しては電源とフロントパネルを接続していなかったからでした。この時点でのトラブルは「接続忘れ」や「ちゃんと接続できていない」という理由がほとんどだと思うので、うまく動かなかった場合はどこが動いていないか、その周りの接続部分はちゃんと接続できているかを確認します。\nうまく行ったときの様子はこんな感じ。\nPC内部は光るパーツが無いのでかなり地味。今後パーツをアップデートしていく際に光るものを取り入れていこうと思います。\nセットアップ ここまでで組み立ては完了。\n次にセットアップを行います。セットアップするにはモニタやキーボードが必要になります。\nセットアップと言ってもOSをインストールするだけですが\u0026hellip;。\nWindows11はUSBメモリみたいなやつをPCに接続して電源をいれるだけで、インストールが始まります。\nまとめ 最後に周辺機器の配線を見直して完成！\n所要時間は6時間くらいだったと思います。慣れればもっと早くできるはず\u0026hellip;。\n一番ハマったのは配線ですね。どこに何を接続するかの取説みたいなのがあるわけじゃなかったので苦労しました。\nしばらくこの構成で使って、物足りなさを感じてきたらまたパーツを入れ替えていこうと思います。\nデスク周りの紹介はまた別で書こうと思います。カテゴリー「デスクツアー」にまとめる予定です。\n","date":"2023-01-04T14:01:33+09:00","permalink":"https://Oo-Esechi-oO.github.io/p/20230104/","title":"自作PCを組んでみた！Part3"},{"content":"はじめに 今回は何partかに分けて自作PCにチャレンジした際の記録を書いていきます。これから自作PCを組もうとしている方で、「何からやればよいかわからない」「どんな作業工程があるのか知りたい」という方向けの記事となっています。\nPart2では購入するまでの部分を書いていこうと思います。\n大体のイメージを掴んでもらうことを目的にしていますので、細かい内容は記載していません。 詳細な情報を知りたい場合は各自調べてください。\nスペックを決める まずは組み立てるPCのスペックを決めていきます。\nスペックは以下のような流れで決めていきます。\n予算を決める 使い方を洗い出す 各パーツのスペックを決めていく 1. 予算を決める まずは出せる予算を考えます。スペックを決めてもお金が用意できなければ買うことはできませんので、自分の貯金と相談して決めてください。購入するパーツを店員さんに選んで貰う場合も、予算からスペックを絞っていくことが可能になので、決めて置くと良いと思います。初めての自作PCの大体の目安は以下の表くらいかなと思います。(あくまで個人的な感覚。)\n使い方 目安の予算 ネットサーフィンなど軽い作業 10万円前後 ちょっとしたゲームや複数タスクの作業をする 15万円前後 3DCGバチバチのゲームをする 20万円以上 今回の予算としては15万としました。ちょっとしたゲームができたり、ソフトウェア制作の環境がスムーズに動作できれば良いかなと言うことで、普段使いのPCより少し高めの予算で考えています。(店員さんに相談した際は、少し予算足りなそうな反応されてしまいましたが\u0026hellip;。)\n予算を決める際の注意点としてはOS(Windows)の購入も行う必要があるという点です。Windows11で大体15000円するので、考慮していないと結構予算削られてしまいます。店員さんに相談する際は「考えてきた予算がOSなしであること」を伝えておく必要があります。 2. 使い方を洗い出す 使い方を洗い出すことで、自分に必要なスペックを大まかに決めることができます。例えばインストールしようとしているソフトや遊ぼうと思っているゲームの推奨環境を調べると、必要なCPUやメモリ容量を決めることができます。 また、使い方(例えばゲーム配信をするとか)で検索をかけると、大体どれくらいのスペックが必要か記載されたページがヒットするので、そういったものも参考になると思います。\n例として、自分がインストールしようと思っているCubase(DTMのソフト)の推奨環境の一部を貼っておきます。\nOSやCPU・メモリ(RAM)などのスペックが記載されているのがわかると思います。\n(https://www.steinberg.net/ja/system-requirements/)\nこのようなページを調査して一番負荷がかかるソフトに合わせてスペックを決めます。\n推奨環境に記載された通りのスペックで決めてもいいですが、推奨環境から少し余裕をもたせた形にするのもOKです。 経年劣化で動作が重くなったり、今後更に負荷がかかる処理を行う可能性も考えられたりするためです。\n3. 各パーツの詳細スペックを決めていく ここから具体的に各パーツのスペックを決めていきます。主に推奨環境に記載があったスペックはそれを参考にして、記載がなかったものについては別途調査してスペックを決めていきます。\n具体的なパーツのスペックは以下の順番で決めていきます。\nCPU マザーボード メモリ グラフィックボード SSD/HDD CPUクーラー 光学ドライブ 電源ユニット PCケース CPU・マザーボード・メモリは依存関係があるので先に決定します。その他のパーツは特に順番はありません。ただ、電源とケースについては、ある程度パーツのスペックが決まらないと決定できないものですので、最後に決定するようにしています。\nCPU CPUの主流は、AMD社のRyzenシリーズかintel社のCore iシリーズとなっています。各社の細かいスペックはここでは記載しませんが、大体のイメージは以下のような感じかなと思います。\nメリット デメリット Ryzen ・Core iより性能が高いCPUがある(*1) ・トラブルが起きたときの参考ページが少ない\n・性能が高いものは価格も高い Core i ・トラブルが起きた際の参考ページが多い\n・Ryzenよりリーズナブル(*2) ・性能はRyzenのほうが高い(*1) (*1)について\n同じ価格帯でCore iよりRyzenのほうが性能が高いということではない。Core iとRyzenの一番スペックが高いCPUで比べた場合に、Ryzenのほうが性能が高いモデルがあるという意味。\n3DCGゲームを遊びながら配信するなど高負荷な作業を行う場合はAMDのハイエンドクラスのスペックが良い。\n(*2)について\n(*1)のような高負荷な使い方をしない場合はCore iのほうがリーズナブルな場合が多い。\nつまり、高スペックで選ぶならRyzen、そこまで高負荷なことをしないならCore iという感じかなと思います。 Core iの性能が劣っているというわけではないので、そこは誤解なきように。 今回自分が選んだCPUはCore i7としました。i7の中にも更に細かい型番が存在しますが、とりあえずシリーズだけ選びました。\nマザーボード CPUが決まるとマザーボードのスペックを決めることができます。マザーボードのスペックを決めるために必要な情報は「決めたCPUのチップセットは何か」です。チップセットはCPUのデータのやり取りを行うためのもので、RyzenかCore iか、何世代のCPUかによって提供されるチップセットが異なります。CPUとマザーボードで対応しているチップセットが異なるとうまく動作しないので、間違えないように確認して購入する必要があります。\nその他の注目ポイントとしては以下があります。\n大きさ\nマザーボードには大きさに関する規格があります。主流な規格は「ATX」「MicroATX」「Mini-ITX」です。ATX \u0026gt; MicroATX \u0026gt; Mini-ITXという順に大きいです。拡張性(あとからパーツを増やしたり入れ替えたりすること)を意識する場合は「ATX」を選択し、PC設置場所に制限がある場合は「MicroATX」「Mini-ITX」を選択します。\n入出力のインターフェース\nPC背面の入出力インターフェース(USBポートなど)の内容はマザーボードで決定します。どれくらいUSB端子が必要か、USB3.0はどれくらい必要か、Type-Cは必要か、他にどのような端子がいるかなどを洗い上げて、それに見合った内容のマザーボードを選択します。\nM.2スロット\nM.2SSDを接続するためのI/F。高速なデータの読み書きが可能になる。殆どのマザーボードに搭載されているが、スロットがいくつあるかなどチェックしておくと良い。\nWi-FiやBluetoothの機能\nPCをネットワークに無線で接続する場合は、Wi-Fiに対応しているマザーボードを選択する必要がある。基本的に自作PC(=デスクトップPC)は有線で接続するものと個人的には思っているが、無線に対応したマザーボードもあるということで参考までに\u0026hellip;。\nまたマウスやキーボードなどの周辺機器を無線で接続する場合は、Bluetooth機能搭載のマザーボードもある。ただ、Bluetooth機能は後からレシーバーを買って搭載することができるので、無理にマザーボードで対応する必要はない。\nメモリ 最低でも8GBは確保したいです。これはOS(Windows)が無理なく動くことができる容量です。4GBでも最初は問題なく動きますが、すぐに動作が重く感じてくると思います。また、価格的には8GBも16GBもそんなに変わりません。よって16GBを選ぶのが無難かなと思います。高負荷な作業をする人は32GB以上としても良いですが、メモリは増設することもできるので、そんなに必要かわからない場合は無理にこの段階で積む必要はないと思います。\nメモリの購入の仕方にも注意です。メモリは「デュアルチャンネル」という機能があり、同じ容量・規格が2枚1組になれば1枚のものより高速になるというものです。つまり、同じ16GBのメモリを積む場合でも、16GB1枚より8GB2枚としたほうがデータの読み書きが高速になるということです。\nよって、積むと決めた容量の半分の容量のメモリを2枚買うと良いと思います。\nグラフィックボード ゲームなど映像で負荷をかけない場合はCPUに搭載されているオンボードグラフィックで十分です。(オンボードグラフィックを搭載しているCPUを選択する必要が出てきます。)オンボードグラフィックを搭載していないCPUを選ぶ場合や、映像関係で負荷がかかる処理が想定される場合はグラフィックボードを購入する必要があります。\nどれだけのスペックを積めばよいかは、行う作業や遊ぶ予定のゲームから判断する必要があります。\nあとは映像端子の数も考える必要があります。マルチディスプレイにする場合はHDMI端子やDisplayPort端子が複数あるものを選択する必要があります。\n今回自分は、そこまでの負荷をかけない予定だったので、すべてのパーツを決めてから余った予算の価格帯のものを買うという決め方をしました。\nSSD/HDD SSD/HDDは、まずどれだけの容量を買うかを検討します。\n別途データを格納しておくための外部サーバーが用意されていて、PCにデータを格納しておく必要がない場合は256GBや512GBで十分だと思います。全データPCに格納するような環境の場合は1TB以上を考えると良いと思います。SSDのほうが高速で、(HDDより高価とは言えど)最近低価格化が進んでいるので、基本的にSSDを選択すると良いと思います。その中でも、特に「M.2 NVMe」という種類のSSDをおすすめします。これが一番早いです。他にも「M.2 SATA」という種類もありますが、NVMeより速度が遅く価格もNVMeが低価格化してきているため、選択する理由は特にないです。\n予算的にSSD 1TBが厳しい場合は、SSDとHDDのハイブリッドと言う手もあります。OSやシステム、処理が重いソフト用にSSD 256GB~512GBとして、その他のデータをHDDとすると、大容量・低価格を実現することができます。\nHDDのみとする選択肢はないかなと思います。SSDより圧倒的に安く抑えることができますが、動作が遅くなってしまいます。(経年劣化することも考えると動作が遅いのは致命的。)\nCPUクーラー CPUを冷やすためのパーツです。CPUに小さいクーラーが付属している場合がありますが、冷却機能としてはいまひとつのため別途購入したほうが良いと思います。\nクーラーの種類としては空冷と水冷があります。空冷は金属にCPUの熱を伝わらせて、その金属をファンで冷やすもの。水冷は冷却液をを巡回させるような機構になっていて、冷却液にCPUの熱を伝わらせて、ファンで冷却液を冷ますものです。水冷のほうが冷却機能が高いですが、価格は空冷のほうが安いです。\n最初から高負荷な作業を行うことがわかっている場合は水冷を選択し、そこまで高負荷なことをしない場合は空冷で良いと思います。後から入れ替えるのもそこまで難しくないので、一旦空冷で様子見して、動作が厳しそうであれば水冷に入れ替えることもできると思います。\n光学ドライブ CD/DVD/Blu-rayを使う場合は光学ドライブを搭載するかも考える必要があります。WindowsのインストールはUSB端子で行うため、OSのインストールのために搭載する必要はありません。また、外付けの光学ドライブもたくさんあるため、無理に搭載する必要もないと思います。\n搭載する場合は、使用予定のメディアに合わせた光学ドライブを選択するようにしましょう。(Blu-rayを利用する場合はBlu-rayに対応した光学ドライブを選択する。)\n今回自分は、すでに外付けの光学ドライブを持っていたため搭載しませんでした。\n電源ユニット 電源は以下のサイトから目安を計算することができます。\nドスパラ：(https://www.dospara.co.jp/5info/cts_str_power_calculation_main)\n今まで選択してきたパーツの内容を入力することで、「合計使用電力目安」と「おすすめ電力容量」を算出してくれます。「おすすめ電力容量」は「合計使用電力目安」の2倍の値となっています。これは最大電力容量の半分の容量の時が、電力変換効率が一番良い設計となっているからです。他にも、将来的な拡張用や、外部デバイスをPCに接続した場合でも安定して運転できるようにするためなどが挙げられます。なので、「合計使用電力目安」ででた値の容量ではなく、その2倍の容量の電源ユニットを選択するようにしましょう。\nPCケース 今まで決めてきたパーツが収まるサイズのPCケースを選択します。PCの設置場所に制限がある場合は、先にケースのサイズを決めるのも手です。(その分搭載できるパーツに制限が出てきます。)\nPCケースの大きさは基本的にマザーボードの大きさで決定しますが、電源やグラボ、CPUクーラーなどのサイズにも注意する必要があります。\nマザーボードの大きさ 対応するPCケース ATX ミドルタワー MicroATX ミドルタワー\nミニタワー Mini-ITX ミドルタワー\nミニタワー\nMini-ITX専用ケース PCの設置場所に制限がないならATXで考えると良いと思います。大きいので持って帰るのが大変ですが、拡張性が高いことと、各パーツのサイズをそこまで気にしなくても良くなるという点で楽になります。(ミニタワーサイズだとだいたいどんなパーツを選択しても設置することができる。)\nその他のPCケースの選ぶ基準としては以下があります。\nフロント部分のI/F\n背面にも入出力I/F(USBポートとか)はありますが、全面にもUSBポートがあったほうが便利です。また、端子や電源ボタンの場所にも注目しておくとよいです。床にPCを設置する場合は端子や電源ボタンはPCケースの上部(天井)に付いていたほうが便利です。しかし、机上に設置する場合は前面部分についていたほうがアクセスが良くなります。\nホコリ対策\nホコリ対策がどうなっているかで決めるのもありだと思います。フィルターが取り外しできて洗いやすいものを選ぶとメンテナンスが楽になります。\n見た目\n上で色々書きましたが、特にこだわりがなければどのケースも機能・価格は似たり寄ったりです。そのため最後は見た目が好みかどうかになってきます。色やファンの光り方、側面が強化ガラスになっていて内部が見えるようになっているなど、好みの見た目のケースを選択するのが良いでしょう。\n表にまとめる(任意) 店員に相談してパーツを決める場合は、事前にスペックを表にまとめておくと良いと思います。上記の内容をすべて細かくまとめる必要はないです。不足している情報はその場で確認されると思います。\n今回自分は下のような感じで紙にまとめて相談しました。 購入する パーツを購入します。今回はTSUKUMOでパーツを揃えました。(お世話になりました。)\nミニタワーのケース込みですべてのパーツを店頭で購入したとしても持って帰れるように大きな紙袋を用意してくれます。念のためリュックサックを持っていくと小さいパーツはそちらに入れれるので安心だと思います。\nPCパーツ以外に必要なものとして以下も購入する必要があります。(組み立ててからの設定で必要です。)\nOS(Windows) PCモニタ マウス キーボード 今回自分が購入したパーツを以下にまとめます。\nパーツ種類 型番 値段 備考 CPU Intel Core i7-12700 ￥48,073 ・i9ほどの処理は必要なかったのでi7\n・13世代も出ていたが種類が少なかったので12世代 マザーボード ASUS H670(LGA1700)ATX ￥19,800 ・無線機能はなし\n・店員さんに勧められたのもあり メモリ Crucial 16GB Kit (2 x 8GB) DDR4-3200 UDIMM ￥5,819 ・ほかと比べてやすかった グラボ 玄人志向 NVIDIA GEFORCE RTX 3050 搭載 グラフィックボードGG-RTX3050-E8GB/SF ￥29,819 ・余った予算の価格帯を選択\n・DP端子が複数あるもの SSD CFD CFD Gaming PG4VNZ ゲーミングモデル M.2 NVMe接続SSD 1TB CSSD-M2M1TPG4VNZ ￥11,800 ・コスパが良いということで店員さんに勧められたもの CPUクーラー AINEX SE-224-XTA ￥3,255 ・安価なもの 電源ユニット Apexgaming AGシリーズ 80 Plus GOLD認証 750W フルプラグインATX電源 PSU AG-750M-JP PSE(*) ￥8,137 ・理想電力容量438Wからもう一回り余裕のある容量でこちら ケース Antec DF700FLUX ￥9,982 ・見た目とフロントのI/F OS Windows11 Home ￥14,982 ・せっかくなので新しいWindowsにしてみたかった。\n・Proの機能は必要なかったのでHome 合計：￥152,167(+税) ・OS込みの値段のため予算内に収まってる (*)製品ページが見つからなかったのでレビューページをリンクしています。\nまとめ 今回はスペックを決めていくところから購入したところまでをまとめてみました。まあ、店員さんに聞くのが最強ということで\u0026hellip;。 次は組み立てとセットアップについてまとめます。\n","date":"2022-12-25T12:11:56+09:00","permalink":"https://Oo-Esechi-oO.github.io/p/20221225/","title":"自作PCを組んでみた！ Part2"},{"content":"はじめに 今回は何partかに分けて自作PCにチャレンジした際の記録を書いていきます。これから自作PCを組もうとしている方で、「何からやればよいかわからない」「どんな作業工程があるのか知りたい」という方向けの記事となっています。\nPart1では、事前知識を書いていこうと思います。 予備知識 まずは自作PCに付いてザッと説明したいと思います。もうすでにいろんなサイトがこの辺説明しているので、わざわざ書くこともないかもしれませんが\u0026hellip;。\n自作PCとは 自作PCとは、パソコンを構成するパーツ(CPUとかメモリとか)を買って、自分で組み立て～セットアップまで行うものを言います。対の意味の言葉としては「BTOパソコン」があります。これはすでに組み上がった状態のもの(電源を入れればすぐに使うことができる状態)のことを言います。\n自作PCのメリット メリット1：オリジナルのPC構成にできる 自作PCの一番のメリットは、オリジナルのPC構成にできる点です。ゲーム環境用や映像編集用・配信用など、自分の用途に特化した構成にすることができます。また、見た目の部分も自由に選ぶことができます。自分のデスク周りに合った見た目にできたり、内部の光り方にこだわったりすることができます。\nBTOパソコンでは、SSDやメモリの容量を増減させたり、CPUのグレードを変更したりすることはできますが、自作PCに比べると構成の自由度は少ないです。\nメリット2：PCの構成を知ることができる 2つ目のメリットは、PCの内部構成を理解することができる点です。今回自分が自作PCに挑戦しようと思ったのもこれが理由です。(自分の仕事道具のことは知っておきたい的な。)パーツを購入するためには、パーツを選ばないといけませんが、選ぶためにはそのパーツのことを調査しないといけません。また、購入後も自分で組み立てることによって、PC内部でどのようにつながっているのかを知ることができます。\nこれらを知識として持っていることで、PCに不具合が起こった際も最低限のパーツの入れ替えだけで対処することができるようになります。(丸々買い替えようみたいな発想にはならなくなるはず。)\n自作PCのデメリット デメリット1：めんどくさい 自作PCのデメリット1つ目はとにかくめんどくさいことです。パーツの調査は最悪省くことができます。PCパーツ専門店に行って店員さんに一通り選んでもらえれば、とりあえず組み立ての段階に持っていくことはできます。しかし、組み立ては自分で行わないといけない上に、わかりやすいマニュアルもない場合があります。最近はPCパーツ専門店で組み立て代行サービスがあったりしますが、「そこまでやるならもうBTOで良くね？」となってしまいます。また、BTOでもゲーミング仕様なら見た目もカッコいいものがあるため、そこで差をつけれる部分もなくなってきているかなと感じます。\nデメリット2：トラブルは自分で対処しないといけない 「めんどくさい」にも通じてくるところですが、自作PC組み立て中や、その後の使用中で起こる不具合は基本的に自分で調べて対処しないといけません。BTOなら初期不良の保証みたいなものがありますが、自作PCは自分で組み立てているためそういったものがありません。(パーツの初期不良の保証はパーツごとにあったりするけど。)自作PCのトラブルで一番多いのは「電源を入れたのに○○」ではないでしょうか？例えば、動かない・一部のファンしか回らないとかですかね。これらのトラブルに自分で対処しないといけない部分はデメリットになると思います。(これも含めて勉強だとは思いますが。)\n自作PCに向く人/向かない人 以上のことを踏まえると、自作PCに向いている人は、PCの構成にこだわりのある人や組み立てに興味がある人と言えると思います。逆に向いていない人は、手っ取り早くPCを使いたい人になるかなと思います。\nたまにいるのが、「同じスペックで費用を安く抑えたいなら自作が向いてるよね？」という意見ですが、これは間違いです。それなりのスペックのもの(価格でいうと10万円くらいから上のもの)は、自作でもBTOでもそんなに費用は変わりません。\nこの誤解が何故生まれたかですが、(あくまで個人の推測でしかないですが、)「自作PCだとひたすら安いPCが作れる」という話から誤解が生じたのではないかと考えています。自作PCだと、最低限Officeだけ使えるとかネットサーフィンだけできるとかであれば1-3万円くらいで組むことができます。つまりひたすら安く組むことができます。ここから誤解が生じて「同スペックでも自作の方が安くなる」という話になってしまったのかなと思います。\nですので、費用面でも自作/BTOで違いはありませんので、ほとんどの方はBTOパソコンで事足りると思います。\n全体の作業イメージ 自作PCの作業は以下のような流れになります。\nスペックを決める パーツを選ぶ 購入する 組み立てる セットアップする 「2.パーツを選ぶ」は最悪店員さんに選んでもらうでも良いかもしれません。\n(はじめてだとパーツ間の相性とか自信がないと思うので\u0026hellip;。)\n各作業ボリュームは「パーツ購入まで：組み立て：セットアップ=7：2：1」といったところでしょうか。はじめての自作PCだとどのようなパーツが必要か、そのパーツがどのようなものなのかを調べるのに時間がかかります。それさえ決まってしまえば、あとは買って組み立てるだけ。組み立ても決まったところに決まったパーツを設置していけば良いだけなので、そこまで時間はかからないと思います。(トラブらなければですが\u0026hellip;。)\n調査の仕方 パーツなどの調査は基本的にネットで調べれば良いと思います。しかし、自作PC初心者の方は何を調べればよいのか、どのようなことを頭に入れないといけないかがそもそもわからないと思います。そんな方へのおすすめは書籍を買うことです。ネットだと情報量は多いですが、乱雑かつ膨大過ぎて取捨選択ができずに結局理解できないと思います。書籍であれば順序だって記載されているため、理解しやすいと思います。書籍で最低限の知識を身に付けて、ネットで具体的・詳細に調べていく方法が良いと思います。\n自分が自作PCの勉強に使った書籍としては以下になります。どの書籍もだいたい同じだとは思いますが、「自作PCとは」という部分から、各パーツの役割・スペックによる違い、組み立て事例などが載っていてイメージがつかみやすいと思います。\nAmazon 1540円 自分の場合、自作PCを組んだのは2022/12月ですが、調査は2021年の段階から行っていました。調査したは良いものの、実家には置き場所がなかったため、引っ越してようやく組めるようになったといった感じ。なので、紹介している書籍は少し古いものになります。書籍内で紹介しているパーツは古いものが記載されているかもですが、自作PCの大まかな内容(どんな種類のパーツが必要か、組み立て方とか)はほとんど同じなので、基礎知識を会得するという目的であれば、これで問題ないと思います。(なんだったらこの書籍である必要もないです。)\nちなみに2022版も出ていいるようですね。\nAmazon 1490円 最新のパーツの型番やスペックの調査まで書籍で完結させたい方は、2022版を購入して読んでみるのが良いと思います。\nまとめ 自作PCの体験記と題して、今回は自作PCの予備知識を書いてみました。次回から実際に自分が組んだPCの実例を書いていきたいと思います。\n","date":"2022-12-17T16:27:12+09:00","permalink":"https://Oo-Esechi-oO.github.io/p/20221217/","title":"自作PCを組んでみた！ Part1"}]